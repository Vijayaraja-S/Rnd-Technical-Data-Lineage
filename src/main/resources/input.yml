#sqlQuery: select COLUMN_1 as veeran, COLUMN_2 as vijay
#          from APPLICATION1.SCHEMA1_TABLE_1 as t
#          where column_1 = 10
#  LIMIT 20
#sqlQuery: SELECT
#  t1.COLUMN_1 AS C1,
#  t1.COLUMN_2 AS C2,
#  t2.COLUMN_4 AS additional_info,
#  t3.COLUMN_5 AS more_info,
#  COUNT(*) AS count
#
#  FROM
#  application1_schema1.table_1 t1
#
#  JOIN
#  application1.schema1_table_2 t2
#  ON t1.COLUMN_3 = t2.COLUMN_3
#
#  LEFT JOIN
#  application1.schema1_table_3 t3
#  ON t1.COLUMN_4 = t3.COLUMN_4
#
#  INNER JOIN
#  application1_schema1_table_4 t4
#  ON t2.COLUMN_5 = t4.COLUMN_5
#
#  WHERE
#  t1.column_1 = 10
#  AND t4.column_6 IS NOT NULL
#  AND t2.column_7 BETWEEN '2023-01-01' AND '2023-12-31'
#
#  GROUP BY
#  t1.COLUMN_1, t1.COLUMN_2, t2.COLUMN_4, t3.COLUMN_5
#
#  HAVING
#  COUNT(*) > 2
#
#  ORDER BY
#  t1.COLUMN_1 ASC, t2.COLUMN_4 DESC
#
#  OFFSET 10
#  LIMIT 20


#sqlQuery: WITH RankedResults AS (
#  SELECT
#  TRIM(t1.COLUMN_1) AS C1,
#  COALESCE(t1.COLUMN_2, 'Unknown') AS C2,
#  CASE
#  WHEN t2.COLUMN_4 IS NOT NULL THEN t2.COLUMN_4
#  ELSE 'No Info'
#  END AS additional_info,
#  t3.COLUMN_5 AS more_info,
#  COUNT(*) AS count,
#  ROW_NUMBER() OVER (PARTITION BY TRIM(t1.COLUMN_1) ORDER BY t2.COLUMN_4 DESC) AS row_num,
#  RANK() OVER (ORDER BY TRIM(t1.COLUMN_1) ASC) AS rank,
#  NTILE(4) OVER (ORDER BY TRIM(t1.COLUMN_1)) AS quartile,
#  LEAD(t2.COLUMN_4, 1, 'No Next Info') OVER (ORDER BY TRIM(t1.COLUMN_1)) AS next_info,
#  LAG(t3.COLUMN_5, 1, 'No Previous Info') OVER (ORDER BY TRIM(t1.COLUMN_1)) AS previous_info
#
#  FROM
#  application1_schema1.table_1 t1
#
#  JOIN
#  application1.schema1_table_2 t2
#  ON TRIM(t1.COLUMN_3) = TRIM(t2.COLUMN_3)
#
#  LEFT JOIN
#  application1.schema1_table_3 t3
#  ON TRIM(t1.COLUMN_4) = TRIM(t3.COLUMN_4)
#
#  INNER JOIN
#  application1_schema1_table_4 t4
#  ON TRIM(t2.COLUMN_5) = TRIM(t4.COLUMN_5)
#
#  FULL OUTER JOIN
#  application2.schema2_table_1 t5
#  ON TRIM(t4.COLUMN_8) = TRIM(t5.COLUMN_8)
#
#  CROSS JOIN
#  application3_schema2.table_6 t6
#
#  WHERE
#  TRIM(t1.COLUMN_1) = '10'
#  AND t4.COLUMN_6 IS NOT NULL
#  AND t2.COLUMN_7 BETWEEN '2023-01-01' AND '2023-12-31'
#  AND t5.COLUMN_9 LIKE '%example%'
#  AND t6.COLUMN_10 IN ('A', 'B', 'C')
#
#  GROUP BY
#  TRIM(t1.COLUMN_1),
#  COALESCE(t1.COLUMN_2, 'Unknown'),
#  CASE
#  WHEN t2.COLUMN_4 IS NOT NULL THEN t2.COLUMN_4
#  ELSE 'No Info'
#  END,
#  t3.COLUMN_5
#
#  HAVING
#  COUNT(*) > 2
#  AND SUM(CASE WHEN t4.COLUMN_6 IS NOT NULL THEN 1 ELSE 0 END) > 1
#  AND AVG(CASE WHEN t6.COLUMN_10 = 'A' THEN t2.COLUMN_7 ELSE NULL END) > '2023-06-01'
#  )
#
#  SELECT
#  C1,
#  C2,
#  additional_info,
#  more_info,
#  count,
#  row_num,
#  rank,
#  quartile,
#  next_info,
#  previous_info,
#  SUM(count) OVER (PARTITION BY C1 ORDER BY rank) AS running_total_count
#
#  FROM
#  RankedResults
#
#  GROUP BY
#  C1,
#  C2,
#  additional_info,
#  more_info,
#  count,
#  row_num,
#  rank,
#  quartile,
#  next_info,
#  previous_info
#
#  HAVING
#  SUM(count) > 5
#  AND MAX(rank) <= 10
#
#  ORDER BY
#  rank ASC,
#  quartile DESC
#
#  OFFSET 10
#  LIMIT 20



#sqlQuery: WITH RankedSales AS (
#  SELECT
#  SalesOrderID,
#  CustomerID,
#  ProductID,
#  OrderDate,
#  Quantity,
#  Price,
#  ROW_NUMBER() OVER(PARTITION BY CustomerID ORDER BY OrderDate DESC) AS RowNum,
#  RANK() OVER(PARTITION BY ProductID ORDER BY Price DESC) AS PriceRank,
#  LAG(Price, 1, 0) OVER(PARTITION BY ProductID ORDER BY OrderDate) AS PreviousPrice,
#  LEAD(Price, 1, 0) OVER(PARTITION BY ProductID ORDER BY OrderDate) AS NextPrice
#  FROM
#  SalesOrders
#  WHERE
#  OrderDate >= startDate
#  AND OrderDate <= endDate
#  ),
#  FilteredSales AS (
#  SELECT
#  *,
#  CASE
#  WHEN Price > PreviousPrice THEN 'Price Increased'
#  WHEN Price < PreviousPrice THEN 'Price Decreased'
#  ELSE 'Price Stable'
#  END AS PriceChange,
#  CASE
#  WHEN Quantity > 10 THEN 'Large Order'
#  WHEN Quantity BETWEEN 5 AND 10 THEN 'Medium Order'
#  ELSE 'Small Order'
#  END AS OrderSize
#  FROM
#  RankedSales
#  WHERE
#  RowNum = 1
#  )
#  SELECT
#  SalesOrderID,
#  CustomerID,
#  ProductID,
#  OrderDate,
#  Quantity,
#  Price,
#  PriceRank,
#  PreviousPrice,
#  NextPrice,
#  PriceChange,
#  OrderSize
#  FROM
#  FilteredSales
#  ORDER BY
#  OrderDate DESC




sqlQuery: WITH RECURSIVE EmployeeHierarchy AS (
  SELECT
  EmployeeID,
  ManagerID,
  EmployeeName,
  1 AS Level
  FROM Employees
  WHERE ManagerID IS NULL
  
  UNION ALL


  SELECT
  e.EmployeeID,
  e.ManagerID,
  e.EmployeeName,
  eh.Level + 1 AS Level
  FROM Employees e
  INNER JOIN EmployeeHierarchy eh ON e.ManagerID = eh.EmployeeID
  ),
  DepartmentEmployeeCounts AS (
  SELECT
  d.DepartmentID,
  d.DepartmentName,
  COUNT(e.EmployeeID) AS EmployeeCount
  FROM Departments d
  LEFT JOIN Employees e ON d.DepartmentID = e.DepartmentID
  GROUP BY d.DepartmentID, d.DepartmentName
  )
  
  SELECT
  eh.EmployeeName,
  eh.Level,
  dec.DepartmentName,
  dec.EmployeeCount
  FROM EmployeeHierarchy eh
  INNER JOIN Employees e ON eh.EmployeeID = e.EmployeeID
  INNER JOIN DepartmentEmployeeCounts dec ON e.DepartmentID = dec.DepartmentID
  ORDER BY eh.Level, eh.EmployeeName

