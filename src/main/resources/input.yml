#sqlQuery: select COLUMN_1 as veeran, COLUMN_2 as vijay
#          from APPLICATION1.SCHEMA1_TABLE_1 as t
#          where column_1 = 10
#  LIMIT 20
sqlQuery: SELECT
  t1.COLUMN_1 AS C1,
  t1.COLUMN_2 AS C2,
  t2.COLUMN_4 AS additional_info,
  t3.COLUMN_5 AS more_info,
  COUNT(*) AS count

  FROM
  application1_schema1.table_1 t1

  JOIN
  application1.schema1_table_2 t2
  ON t1.COLUMN_3 = t2.COLUMN_3

  LEFT JOIN
  application1.schema1_table_3 t3
  ON t1.COLUMN_4 = t3.COLUMN_4

  INNER JOIN
  application1_schema1_table_4 t4
  ON t2.COLUMN_5 = t4.COLUMN_5

  WHERE
  t1.column_1 = 10
  AND t4.column_6 IS NOT NULL
  AND t2.column_7 BETWEEN '2023-01-01' AND '2023-12-31'

  GROUP BY
  t1.COLUMN_1, t1.COLUMN_2, t2.COLUMN_4, t3.COLUMN_5

  HAVING
  COUNT(*) > 2

  ORDER BY
  t1.COLUMN_1 ASC, t2.COLUMN_4 DESC

  OFFSET 10
  LIMIT 20


#sqlQuery: WITH RankedResults AS (
#  SELECT
#  TRIM(t1.COLUMN_1) AS C1,
#  COALESCE(t1.COLUMN_2, 'Unknown') AS C2,
#  CASE
#  WHEN t2.COLUMN_4 IS NOT NULL THEN t2.COLUMN_4
#  ELSE 'No Info'
#  END AS additional_info,
#  t3.COLUMN_5 AS more_info,
#  COUNT(*) AS count,
#  ROW_NUMBER() OVER (PARTITION BY TRIM(t1.COLUMN_1) ORDER BY t2.COLUMN_4 DESC) AS row_num,
#  RANK() OVER (ORDER BY TRIM(t1.COLUMN_1) ASC) AS rank,
#  NTILE(4) OVER (ORDER BY TRIM(t1.COLUMN_1)) AS quartile,
#  LEAD(t2.COLUMN_4, 1, 'No Next Info') OVER (ORDER BY TRIM(t1.COLUMN_1)) AS next_info,
#  LAG(t3.COLUMN_5, 1, 'No Previous Info') OVER (ORDER BY TRIM(t1.COLUMN_1)) AS previous_info
#
#  FROM
#  application1_schema1.table_1 t1
#
#  JOIN
#  application1.schema1_table_2 t2
#  ON TRIM(t1.COLUMN_3) = TRIM(t2.COLUMN_3)
#
#  LEFT JOIN
#  application1.schema1_table_3 t3
#  ON TRIM(t1.COLUMN_4) = TRIM(t3.COLUMN_4)
#
#  INNER JOIN
#  application1_schema1_table_4 t4
#  ON TRIM(t2.COLUMN_5) = TRIM(t4.COLUMN_5)
#
#  FULL OUTER JOIN
#  application2.schema2_table_1 t5
#  ON TRIM(t4.COLUMN_8) = TRIM(t5.COLUMN_8)
#
#  CROSS JOIN
#  application3_schema2.table_6 t6
#
#  WHERE
#  TRIM(t1.COLUMN_1) = '10'
#  AND t4.COLUMN_6 IS NOT NULL
#  AND t2.COLUMN_7 BETWEEN '2023-01-01' AND '2023-12-31'
#  AND t5.COLUMN_9 LIKE '%example%'
#  AND t6.COLUMN_10 IN ('A', 'B', 'C')
#
#  GROUP BY
#  TRIM(t1.COLUMN_1),
#  COALESCE(t1.COLUMN_2, 'Unknown'),
#  CASE
#  WHEN t2.COLUMN_4 IS NOT NULL THEN t2.COLUMN_4
#  ELSE 'No Info'
#  END,
#  t3.COLUMN_5
#
#  HAVING
#  COUNT(*) > 2
#  AND SUM(CASE WHEN t4.COLUMN_6 IS NOT NULL THEN 1 ELSE 0 END) > 1
#  AND AVG(CASE WHEN t6.COLUMN_10 = 'A' THEN t2.COLUMN_7 ELSE NULL END) > '2023-06-01'
#  )
#
#  SELECT
#  C1,
#  C2,
#  additional_info,
#  more_info,
#  count,
#  row_num,
#  rank,
#  quartile,
#  next_info,
#  previous_info,
#  SUM(count) OVER (PARTITION BY C1 ORDER BY rank) AS running_total_count
#
#  FROM
#  RankedResults
#
#  GROUP BY
#  C1,
#  C2,
#  additional_info,
#  more_info,
#  count,
#  row_num,
#  rank,
#  quartile,
#  next_info,
#  previous_info
#
#  HAVING
#  SUM(count) > 5
#  AND MAX(rank) <= 10
#
#  ORDER BY
#  rank ASC,
#  quartile DESC
#
#  OFFSET 10
#  LIMIT 20



#sqlQuery: WITH RankedSales AS (
#  SELECT
#  SalesOrderID,
#  CustomerID,
#  ProductID,
#  OrderDate,
#  Quantity,
#  Price,
#  ROW_NUMBER() OVER(PARTITION BY CustomerID ORDER BY OrderDate DESC) AS RowNum,
#  RANK() OVER(PARTITION BY ProductID ORDER BY Price DESC) AS PriceRank,
#  LAG(Price, 1, 0) OVER(PARTITION BY ProductID ORDER BY OrderDate) AS PreviousPrice,
#  LEAD(Price, 1, 0) OVER(PARTITION BY ProductID ORDER BY OrderDate) AS NextPrice
#  FROM
#  SalesOrders
#  WHERE
#  OrderDate >= startDate
#  AND OrderDate <= endDate
#  ),
#  FilteredSales AS (
#  SELECT
#  *,
#  CASE
#  WHEN Price > PreviousPrice THEN 'Price Increased'
#  WHEN Price < PreviousPrice THEN 'Price Decreased'
#  ELSE 'Price Stable'
#  END AS PriceChange,
#  CASE
#  WHEN Quantity > 10 THEN 'Large Order'
#  WHEN Quantity BETWEEN 5 AND 10 THEN 'Medium Order'
#  ELSE 'Small Order'
#  END AS OrderSize
#  FROM
#  RankedSales
#  WHERE
#  RowNum = 1
#  )
#  SELECT
#  SalesOrderID,
#  CustomerID,
#  ProductID,
#  OrderDate,
#  Quantity,
#  Price,
#  PriceRank,
#  PreviousPrice,
#  NextPrice,
#  PriceChange,
#  OrderSize
#  FROM
#  FilteredSales
#  ORDER BY
#  OrderDate DESC



#
#  sqlQuery: WITH EmployeeSales AS (
#              SELECT e.EmployeeID, e.EmployeeName, SUM(s.SaleAmount) AS TotalSales
#              FROM employees e
#              JOIN sales s ON e.EmployeeID = s.EmployeeID
#              GROUP BY e.EmployeeID, e.EmployeeName
#              ),
#
#              EmployeeAverages AS (
#              SELECT AVG(TotalSales) AS AverageSales
#              FROM EmployeeSales
#              ),
#
#              EmployeeRanks AS (
#              WITH
#              AboveAverageEmployees AS (
#              SELECT es.EmployeeID, es.EmployeeName, es.TotalSales
#              FROM EmployeeSales es
#              WHERE es.TotalSales > (SELECT AverageSales FROM EmployeeAverages)
#              ),
#
#              BelowAverageEmployees AS (
#              SELECT es.EmployeeID, es.EmployeeName, es.TotalSales
#              FROM EmployeeSales es
#              WHERE es.TotalSales <= (SELECT AverageSales FROM EmployeeAverages)
#              )
#              SELECT es.EmployeeID, es.EmployeeName, es.TotalSales,
#              RANK() OVER (ORDER BY es.TotalSales DESC) AS SalesRank,
#              CASE
#              WHEN es.EmployeeID IN (SELECT EmployeeID FROM AboveAverageEmployees)
#              THEN 'Above Average'
#              ELSE 'Below Average'
#              END AS Performance
#              FROM EmployeeSales es
#              ),
#
#              DepartmentSales AS (
#              WITH
#              DepartmentTotals AS (
#              SELECT d.DepartmentID, d.DepartmentName,
#              SUM(er.TotalSales) AS DepartmentTotalSales
#              FROM departments d
#              JOIN employees e ON d.DepartmentID = e.DepartmentID
#              JOIN EmployeeRanks er ON e.EmployeeID = er.EmployeeID
#              GROUP BY d.DepartmentID, d.DepartmentName
#              )
#              SELECT dt.DepartmentID, dt.DepartmentName, dt.DepartmentTotalSales,
#              COUNT(er.EmployeeID) AS EmployeeCount
#              FROM DepartmentTotals dt
#              JOIN employees e ON dt.DepartmentID = e.DepartmentID
#              JOIN EmployeeRanks er ON e.EmployeeID = er.EmployeeID
#              GROUP BY dt.DepartmentID, dt.DepartmentName, dt.DepartmentTotalSales
#              ),
#
#              DepartmentRanks AS (
#              WITH
#              DepartmentAverages AS (
#              SELECT AVG(ds.DepartmentTotalSales) AS AvgDepartmentSales
#              FROM DepartmentSales ds
#              )
#              SELECT ds.DepartmentID, ds.DepartmentName, ds.DepartmentTotalSales,
#              RANK() OVER (ORDER BY ds.DepartmentTotalSales DESC) AS DepartmentRank,
#              CASE
#              WHEN ds.DepartmentTotalSales > (SELECT AvgDepartmentSales FROM DepartmentAverages)
#              THEN 'Above Average'
#              ELSE 'Below Average'
#              END AS DepartmentPerformance
#              FROM DepartmentSales ds
#              ),
#
#              EmployeeDepartmentRanks AS (
#              WITH
#              TopDepartments AS (
#              SELECT DepartmentID, DepartmentName, DepartmentTotalSales
#              FROM DepartmentRanks
#              WHERE DepartmentRank <= 3
#              ),
#
#              TopEmployees AS (
#              SELECT EmployeeID, EmployeeName, TotalSales, SalesRank
#              FROM EmployeeRanks
#              WHERE SalesRank <= 5
#              )
#              SELECT er.EmployeeID, er.EmployeeName, er.TotalSales, er.SalesRank,
#              dr.DepartmentName, dr.DepartmentTotalSales, dr.DepartmentRank
#              FROM TopEmployees er
#              JOIN employees e ON er.EmployeeID = e.EmployeeID
#              JOIN TopDepartments dr ON e.DepartmentID = dr.DepartmentID
#              ),
#
#              TopDepartmentContributions AS (
#              WITH
#              EmployeeContributions AS (
#              SELECT ed.EmployeeID, ed.EmployeeName, ed.DepartmentName,
#              ed.TotalSales, ed.DepartmentTotalSales,
#              (ed.TotalSales / ed.DepartmentTotalSales) * 100 AS ContributionPercentage
#              FROM EmployeeDepartmentRanks ed
#              )
#              SELECT ec.DepartmentName, SUM(ec.ContributionPercentage) AS TotalContribution
#              FROM EmployeeContributions ec
#              GROUP BY ec.DepartmentName
#              ),
#
#              TopContributors AS (
#              WITH
#              HighestContributions AS (
#              SELECT DepartmentName, MAX(TotalContribution) AS MaxContribution
#              FROM TopDepartmentContributions
#              GROUP BY DepartmentName
#              )
#              SELECT ec.EmployeeID, ec.EmployeeName, ec.DepartmentName, ec.ContributionPercentage
#              FROM EmployeeContributions ec
#              JOIN HighestContributions hc ON ec.DepartmentName = hc.DepartmentName
#              WHERE ec.ContributionPercentage = hc.MaxContribution
#              ),
#
#              DepartmentTopContributors AS (
#              WITH
#              TopContributorTotals AS (
#              SELECT tc.DepartmentName, SUM(tc.ContributionPercentage) AS TotalTopContribution
#              FROM TopContributors tc
#              GROUP BY tc.DepartmentName
#              )
#              SELECT tc.DepartmentName, tc.TotalTopContribution
#              FROM TopContributorTotals tc
#              ORDER BY tc.TotalTopContribution DESC
#              ),
#
#              FinalResults AS (
#              WITH
#              HighContributionDepartments AS (
#              SELECT DepartmentName, TotalTopContribution
#              FROM DepartmentTopContributors
#              WHERE TotalTopContribution > 50
#              )
#              SELECT hcd.DepartmentName, hcd.TotalTopContribution
#              FROM HighContributionDepartments hcd
#              ORDER BY hcd.TotalTopContribution DESC
#              )
#
#              SELECT fr.DepartmentName, fr.TotalTopContribution
#              FROM FinalResults fr


#
#sqlQuery: WITH
#  Level1 AS (
#  WITH
#  Level2 AS (
#  WITH
#  Level3 AS (
#  WITH
#  Level4 AS (
#  WITH
#  Level5 AS (
#  WITH
#  Level6 AS (
#  WITH
#  Level7 AS (
#  WITH
#  Level8 AS (
#  WITH
#  Level9 AS (
#  WITH
#
#  Level10 AS (
#  SELECT 'Level 10 Result' AS Result
#  )
#  SELECT 'Level 9 Result' AS Result, l10.Result AS NestedResult
#  FROM Level10 l10
#  )
#  SELECT 'Level 8 Result' AS Result, l9.Result AS NestedResult
#  FROM Level9 l9
#  )
#  SELECT 'Level 7 Result' AS Result, l8.Result AS NestedResult
#  FROM Level8 l8
#  )
#  SELECT 'Level 6 Result' AS Result, l7.Result AS NestedResult
#  FROM Level7 l7
#  )
#  SELECT 'Level 5 Result' AS Result, l6.Result AS NestedResult
#  FROM Level6 l6
#  )
#  SELECT 'Level 4 Result' AS Result, l5.Result AS NestedResult
#  FROM Level5 l5
#  )
#  SELECT 'Level 3 Result' AS Result, l4.Result AS NestedResult
#  FROM Level4 l4
#  )
#  SELECT 'Level 2 Result' AS Result, l3.Result AS NestedResult
#  FROM Level3 l3
#  )
#  SELECT 'Level 1 Result' AS Result, l2.Result AS NestedResult
#  FROM Level2 l2
#  )
#  SELECT Result, NestedResult
#  FROM Level1
